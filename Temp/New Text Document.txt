/*
 * GLUT Shapes Demo
 *
 * Written by Nigel Stewart November 2003
 *
 * This program is test harness for the sphere, cone
 * and torus shapes in GLUT.
 *
 * Spinning wireframe and smooth shaded shapes are
 * displayed until the ESC or q key is pressed.  The
 * number of geometry stacks and slices can be adjusted
 * using the + and - keys.
 */


#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <stdlib.h>
#include <windows.h>
#include <iostream>
#include <math.h>


GLfloat eyex=0, eyey=2, eyez=50, lookx=0, looky=2, lookz=30, upx=0, upy=1, upz=0, ttx=0, tty=0,ttz=0, alpha=0, theta=0, beta=0,axis_x=0, axis_y=0, axis_z=0, angle=0.0, zx=1,zy=1,zz=1;
GLboolean bRotate=false, tRotate=false, uRotate=false, rot= false;
static int slices = 16;
static int stacks = 16;

/* GLUT callback Handlers */

void cylinder(GLfloat r, GLfloat g, GLfloat b){

    glPushMatrix();
    glTranslatef(0,1,0);
    glPushMatrix();
    glColor3f(r,g,b);
    glRotatef(90,1,0,0);
    GLUquadricObj *quad = gluNewQuadric();
    gluCylinder(quad, 1,1,2,100,100);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1,1,0);
    glRotatef(-90, 1,0,0);
    GLUquadricObj *quad1 = gluNewQuadric();
    gluDisk(quad1, 0,1,100,100);
    glPopMatrix();


     glPushMatrix();
    glColor3f(1,1,0);
    glTranslatef(0,-2,0);
    glRotatef(90, 1,0,0);
    GLUquadricObj *quad2 = gluNewQuadric();
    gluDisk(quad2, 0,1,100,100);
    glPopMatrix();
    glPopMatrix();
}


void N(){
    glPushMatrix();
    glTranslatef(-3,0,0);
    glScalef(1,5,1);
    cylinder(0,1,1);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(3,0,0);
    glScalef(1,5,1);
    cylinder(0,1,1);
    glPopMatrix();
    glRotatef(38, 0,0,1);
    glScalef(.9,5.3,.9);
    cylinder(0,1,1);
    glPopMatrix();
}


void A(){
    glPushMatrix();
    glTranslatef(0,4,0);
    glRotatef(-90,1,0,0);
    glutSolidCone(2,2,100,100);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(-2.35,0,0);
    glRotatef(-30,0,0,1);
    glScalef(1,5.4,1);
    cylinder(1,1,0);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(2.35,0,0);
    glRotatef(30,0,0,1);
    glScalef(.95,5.4,.95);
    cylinder(1,1,0);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(0,-.5,0);
    glRotatef(90,0,0,1);
    glScalef(.9,2,.9);
    cylinder(1,1,0);
    glPopMatrix();
}

void I(){
    glPushMatrix();
    glScalef(1,5,1);
    cylinder(.5,1,.2);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(0,5,0);
    glRotatef(90,0,0,1);
    glScalef(1,3,1);
    cylinder(.5,1,.2);
    glPopMatrix();
    glPushMatrix();
     glTranslatef(0,-5,0);
    glRotatef(90,0,0,1);
    glScalef(1,3,1);
    cylinder(.5,1,.2);
    glPopMatrix();

}


void B(){

    glPushMatrix();
    glTranslatef(1,0,0);
    glPushMatrix();
    glTranslatef(-3,0,0);
    glScalef(1,5,1);
    cylinder(1,0,1);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-1,3,0);
    glRotatef(-120,0,0,1);
    glScalef(.8,2.5,.8);
    cylinder(1,0,1);
    glPopMatrix();

     glPushMatrix();
    glTranslatef(-1,1,0);
    glRotatef(-60,0,0,1);
    glScalef(.8,2.5,.8);
    cylinder(1,0,1);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(.5,2, 0);
    glColor3f(1,0,1);
    glRotatef(90,0,1,0);
    glutSolidCone(1.5,1.5,10,10);

    glPopMatrix();


    glPushMatrix();
    glTranslatef(0,-4,0);
    glPushMatrix();
    glTranslatef(-1,3,0);
    glRotatef(-120,0,0,1);
    glScalef(.9,2.5,.9);
    cylinder(1,0,1);
    glPopMatrix();

     glPushMatrix();
    glTranslatef(-1,1,0);
    glRotatef(-60,0,0,1);
    glScalef(.9,2.5,.9);
    cylinder(1,0,1);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(.5,2, 0);
    glColor3f(1,0,1);
    glRotatef(90,0,1,0);
    glutSolidCone(1.5,1.5,10,10);

    glPopMatrix();

    glPopMatrix();
    glPopMatrix();



}


void L(){
    glPushMatrix();
    glScalef(1,5,1);
    cylinder(1,.5,.2);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(3,-5,0);
    glRotatef(90,0,0,1);
    glScalef(1,4,1);
    cylinder(1,.5,.2);
    glPopMatrix();

}


static void display(void)
{
    const double t = glutGet(GLUT_ELAPSED_TIME) / 1000.0;
    const double a = t*90.0;

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glViewport(0, 0, 1000, 1000);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60,1,3,300);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity() ;
    gluLookAt(eyex, eyey, eyez, lookx, looky, lookz, upx, upy, upz);
    glRotatef( alpha,axis_x, axis_y, axis_z );
    glRotatef( theta,axis_x, axis_y, axis_z );
    glRotatef( beta,axis_x, axis_y, axis_z );


    glPushMatrix();
    glTranslatef(-20, 0,0);
    glRotatef(angle, 0,1,0);
    N();
    glPopMatrix();
    glPushMatrix();
    glTranslatef(-10, 0,0);
    glRotatef(angle, 0,1,0);
    A();
    glPopMatrix();
    glPushMatrix();
    glScalef(zx, zy,zz);
    glScalef(1.2,1.2,1.2);
    glRotatef(angle, 0,1,0);
    B();
    glPopMatrix();
    glPushMatrix();
    glTranslatef(10, 0,0);
    glRotatef(angle, 0,1,0);
    I();
    glPopMatrix();
    glPushMatrix();
    glTranslatef(15, 0,0);
    glRotatef(angle, 0,1,0);
    L();
    glPopMatrix();

    glutSwapBuffers();
}


static void key(unsigned char key, int x, int y)
{
    switch (key)
    {
        case 27 :
//        case 'q':
//            exit(0);
//            break;

        case '+':
            slices++;
            stacks++;
            break;

        case '-':
            if (slices>3 && stacks>3)
            {
                slices--;
                stacks--;
            }
            break;
        case ';':
            ttx+=.5;
            std::cout<<ttx<<std::endl;
            break;
        case ':':
            ttx-=.5;
            std::cout<<ttx<<std::endl;
            break;
        case '\'':
            tty+=.5;
            std::cout<<tty<<std::endl;
            break;
        case '\"':
            tty-=.5;
            std::cout<<tty<<std::endl;
            break;
        case '\\':
            ttz+=.5;
            std::cout<<ttz<<std::endl;
            break;
        case '|':
            ttz-=.5;
            std::cout<<ttz<<std::endl;
            break;
        case 'w':
            eyez--;
            lookz--;
            break;
        case 's':
            eyez++;
            lookz++;
            break;
        case 'a':
            eyex++;
            lookx++;
            break;
        case 'd':
            eyex--;
            lookx--;
            break;
        case '[':
            eyey++;
            looky++;
            break;
        case ']':
            eyey--;
            looky--;
            break;
        case 'q':
        bRotate = true;
        uRotate = false;
        tRotate = false;
        axis_x=0.0;
        axis_y=1.0;
        axis_z=0.0;
        glutPostRedisplay();
        break;
        case 'Q':
        bRotate = false;
        uRotate = false;
        tRotate = false;
        axis_x=0.0;
        axis_y=1.0;
        axis_z=0.0;
        glutPostRedisplay();
        break;

    case 'r':
        uRotate = true;
        bRotate = false;
        tRotate = false;
        axis_x=1.0;
        axis_y=0.0;
        axis_z=0.0;
        glutPostRedisplay();
        break;
    case 'R':
        uRotate = false;
        bRotate = false;
        tRotate = false;
        axis_x=1.0;
        axis_y=0.0;
        axis_z=0.0;
        glutPostRedisplay();
        break;

    case 't':
        tRotate = true;
        uRotate = false;
        bRotate = false;
        axis_x=0.0;
        axis_y=0.0;
        axis_z=1.0;
        glutPostRedisplay();
        break;
    case 'T':
        tRotate = false;
        uRotate = false;
        bRotate = false;
        axis_x=0.0;
        axis_y=0.0;
        axis_z=1.0;
        glutPostRedisplay();
        break;
    case 'z':
        zx+=.1;
        zy+=.1;
        zz+=.1;
        break;
    case 'Z':
        zx-=.1;
        zy-=.1;
        zz-=.1;
        break;
    case 'p':
        rot=true;
        break;
    case 'P':
        rot=false;
        break;
    }

    glutPostRedisplay();
}

static void idle(void)
{
     if (bRotate == true)
    {
        theta += 0.2;
        if(theta > 360.0)
            theta -= 360.0*floor(theta/360.0);

    }

    if (uRotate == true)
    {
        alpha += 0.2;
        if(alpha > 360.0)
            alpha -= 360.0*floor(alpha/360.0);

    }

    if (tRotate == true)
    {
        beta += 0.2;
        if(beta > 360.0)
            beta -= 360.0*floor(beta/360.0);

    }
    if(rot==true){
        angle+=.2;
        if(angle>360.0) angle-=360.0*floor(angle/360.0);
    }

    glutPostRedisplay();
}

const GLfloat light_ambient[]  = { 0.0f, 0.0f, 0.0f, 1.0f };
const GLfloat light_diffuse[]  = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_position[] = { 2.0f, 5.0f, 5.0f, 0.0f };

const GLfloat mat_ambient[]    = { 0.7f, 0.7f, 0.7f, 1.0f };
const GLfloat mat_diffuse[]    = { 0.8f, 0.8f, 0.8f, 1.0f };
const GLfloat mat_specular[]   = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat high_shininess[] = { 100.0f };

/* Program entry point */

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(1000,1000);
    glutInitWindowPosition(100,100);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);

    glutCreateWindow("GLUT Shapes");

//    glutReshapeFunc(resize);
    glutDisplayFunc(display);
    glutKeyboardFunc(key);
    glutIdleFunc(idle);

    glClearColor(0,0,0,1);
    glEnable(GL_CULL_FACE);
    glCullFace(GL_BACK);

    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);

    glEnable(GL_LIGHT0);
    glEnable(GL_NORMALIZE);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHTING);

    glLightfv(GL_LIGHT0, GL_AMBIENT,  light_ambient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE,  light_diffuse);
    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);

    glMaterialfv(GL_FRONT, GL_AMBIENT,   mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE,   mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR,  mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);

    glutMainLoop();

    return EXIT_SUCCESS;
}
